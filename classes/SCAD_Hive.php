<?
/**
 * SCAD - Super Cascasding Development
 *
 * PHP version 5
 *
 * Hive Creation Class
 * 
 * LICENSE:
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 * @author     Torsten Raudssus <torsten@raudssus.de>
 * @copyright  2007 Torsten Raudssus
 * @license    GPL-2 
 * 
 */

if (!defined('SCAD_PATH')) { define('SCAD_PATH',realpath(dirname(__FILE__).DIRECTORY_SEPARATOR.'..')); }
if (!class_exists('SCAD_Analyze')) { require_once(SCAD_PATH.DIRECTORY_SEPARATOR.'classes'.DIRECTORY_SEPARATOR.'SCAD_Analyze.php'); }
if (!class_exists('SCAD_Generator')) { require_once(SCAD_PATH.DIRECTORY_SEPARATOR.'classes'.DIRECTORY_SEPARATOR.'SCAD_Generator.php'); }

class SCAD_Hive {

	protected $name;
	protected $hiveClasses = Array();
	protected $hiveClassDefinitions = Array();
	protected $lastClass;
	protected $hiveCode;
	
	public function __construct($Hive,$HiveClasses = Array()) {
		if (is_string($Hive)) {
			$this->name = $Hive;
		} else {
			throw new Exception('SCAD_Hive->__construct($Hive,$HiveClasses) needs a string as $Hive');
		}
		if (is_array($HiveClasses)) {
			foreach($HiveClasses as $Class) {
				$this->AddClass($Class);
			}
		} else {
			throw new Exception('SCAD_Hive->__construct($Hive,$HiveClasses) needs an array as $HiveClasses');
		}
	}

	public function AddClass($Class) {
		if (!isset($this->hiveCode)) {
			if (is_string($Class)) {
				if (in_array($Class,$this->hiveClasses)) {
					throw new Exception('SCAD_Hive->AddClass($Class) the $Class "'.$Class.'" is already in the hive');
				}
				$this->hiveClasses[] = $Class;
				$ClassAnalyze = SCAD_Analyze::AnalyzeClass($Class);
				$ClassAnalyze['Name'] = $this->GetName().$ClassAnalyze['Name'];
				if (!empty($this->hiveClassDefinitions)) {
					if (isset($ClassAnalyze['Extends']) && $ClassAnalyze['Extends'] != $this->lastClass) {
						$this->AddClass($ClassAnalyze['Extends']);
						$ClassAnalyze['Extends'] = $this->GetName().$ClassAnalyze['Extends'];
					} else {
						$ClassAnalyze['Extends'] = $this->lastClass;
					}
				}
				$this->lastClass = $ClassAnalyze['Name'];
				$this->hiveClassDefinitions[] = $ClassAnalyze;
			} else {
				throw new Exception('SCAD_Hive->AddClass($Class) needs a string as $Class');
			}
		} else {
			throw new Exception('SCAD_Hive->AddClass($Class) hive already constructed');
		}
		return $this;
	}
	
	public function GetName() {
		return $this->name;
	}
	
	public function GetCode() {
		$this->generateCode();
		return $this->hiveCode;
	}
	
	protected function generateCode() {
		if (!isset($this->hiveCode)) {
			$this->hiveCode = "/* autogenerated classes - modification useless */\n\n";
			foreach($this->hiveClassDefinitions as $ClassDefinition) {
				$this->hiveCode .= SCAD_Generator::GenerateClass($ClassDefinition);
			}
			$this->hiveCode .= 'class '.$this->GetName().' extends '.$this->lastClass." {\n";
			$this->hiveCode .= "}\n";
		}
		return true;
	}
	
}